Page({
    data: {
        categories: [
            { name: 'ÁÇíËèú' },
            { name: 'ÁÇñËèú' },
            { name: 'ÊñôÁêÜ' },
            { name: 'ÂáâËèú' },
            { name: '‰∏ªÈ£ü' },
            { name: 'ÁîúÂìÅ' },
            { name: 'È•ÆÂìÅ' },
        ],
        sections: [],
        activeCategoryIndex: 0,
        scrollIntoView: '',
        cartCount: 0,
        cartItems: {},
        animating: {},
        showCartDrawer: false,
        cartList: [],
        dishes: [],
        orderedList: []
    },

    onLoad() {
        const sections = [
            {
                id: 'cat-0',
                title: 'ÁÉ≠Ëèú',
                items: [
                    { name: 'ÂÆ´‰øùÈ∏°‰∏Å', desc: 'Ëä±ÁîüÊê≠ÈÖçÂæÆËæ£Âè£ÊÑü', emoji: 'üçó' },
                    { name: 'È±ºÈ¶ôËÇâ‰∏ù', desc: 'ÈÖ∏ÁîúÈÄÇÂè£ÔºåÂõûÂë≥Êó†Á©∑', emoji: 'ü•¢' },
                    { name: 'Á∫¢ÁÉßËÇâ', desc: 'ÂÖ•Âè£Âç≥ÂåñÁöÑÁîúÂí∏Âπ≥Ë°°', emoji: 'ü•ò' }
                ]
            },
            {
                id: 'cat-1',
                title: 'ÁÇñËèú',
                items: []
            },
            {
                id: 'cat-2',
                title: 'ÊñôÁêÜ',
                items: []
            },
            {
                id: 'cat-3',
                title: 'ÂáâËèú',
                items: [
                    { name: 'ÊãçÈªÑÁìú', desc: 'Ê∏ÖÁàΩÂºÄËÉÉ', emoji: 'ü•í' },
                    { name: 'ÂáâÊãåÊú®ËÄ≥', desc: 'ËÑÜÁàΩÂèØÂè£', emoji: 'üçÑ' }
                ]
            },
            {
                id: 'cat-4',
                title: '‰∏ªÈ£ü',
                items: [
                    { name: 'ÁâõËÇâÈù¢', desc: 'Ê±§ÊµìÂë≥Ê≠£', emoji: 'üçú' },
                    { name: 'ÁÇíÈ•≠', desc: 'Á≤íÁ≤íÂàÜÊòé', emoji: 'üçö' }
                ]
            },
            {
                id: 'cat-5',
                title: 'ÁîúÂìÅ',
                items: [
                    { name: 'ÂèåÁöÆÂ•∂', desc: 'È¶ôÊªëÈ°∫Âè£', emoji: 'üçÆ' },
                    { name: 'ËäíÊûúÂ∏É‰∏Å', desc: 'ÊûúÈ¶ôÊµìÈÉÅ', emoji: 'ü•≠' }
                ]
            },
            {
                id: 'cat-6',
                title: 'È•ÆÂìÅ',
                items: [
                    { name: 'Êü†Ê™¨Ëå∂', desc: 'Ê∏ÖÊñ∞Ëß£ËÖª', emoji: 'üçã' },
                    { name: 'ÊãøÈìÅ', desc: '‰∏ùÊªëÈÜáÈ¶ô', emoji: '‚òï' }
                ]
            }
        ];

        this.setData({ sections, scrollIntoView: sections[0].id });
        this.computeSectionTops();
        this.waitForCloudInit(() => {
            this.loadOrderedDishes();
            this.setupOrderedDishesWatcher();
        });
    },

    onUnload() {
        if (this.orderedWatcher) {
            this.orderedWatcher.close();
            this.orderedWatcher = null;
        }
    },

    // Wait for cloud initialization before running callback
    waitForCloudInit(callback) {
        const app = getApp();
        if (app.globalData.cloudReady) {
            console.log('‰∫ëÁéØÂ¢ÉÂ∑≤Â∞±Áª™ÔºåÁõ¥Êé•ÊâßË°å');
            callback();
        } else {
            console.log('Á≠âÂæÖ‰∫ëÁéØÂ¢ÉÂàùÂßãÂåñ...');
            const checkInterval = setInterval(() => {
                if (app.globalData.cloudReady) {
                    clearInterval(checkInterval);
                    console.log('‰∫ëÁéØÂ¢ÉÂàùÂßãÂåñÂÆåÊàê');
                    callback();
                }
            }, 500);
            setTimeout(() => {
                clearInterval(checkInterval);
                if (!app.globalData.cloudReady) {
                    console.error('‰∫ëÁéØÂ¢ÉÂàùÂßãÂåñË∂ÖÊó∂');
                    wx.showToast({ title: '‰∫ëÊúçÂä°‰∏çÂèØÁî®', icon: 'none' });
                }
            }, 10000); // 10s timeout
        }
    },

    loadOrderedDishes() {
        const db = wx.cloud.database();
        db.collection('orderedDishes').get({
            success: res => {
                console.log('Âä†ËΩΩËÆ¢ÂçïÊàêÂäü', res.data);
                this.setData({ orderedList: res.data });
            },
            fail: err => {
                console.error('Âä†ËΩΩËÆ¢ÂçïÂ§±Ë¥•', err);
                wx.showToast({ title: 'Âä†ËΩΩËÆ¢ÂçïÂ§±Ë¥•: ' + err.errMsg, icon: 'none' });
            }
        });
    },

    setupOrderedDishesWatcher() {
        const db = wx.cloud.database();
        this.orderedWatcher = db.collection('orderedDishes').watch({
            onChange: snapshot => {
                console.log('ËÆ¢ÂçïÊï∞ÊçÆÊõ¥Êñ∞', snapshot.docs);
                this.setData({ orderedList: snapshot.docs });
            },
            onError: err => {
                console.error('ËÆ¢ÂçïÁõëÂê¨ÈîôËØØ', err);
                wx.showToast({ title: 'ËÆ¢ÂçïÁõëÂê¨Â§±Ë¥•: ' + err.errMsg, icon: 'none' });
                setTimeout(() => this.setupOrderedDishesWatcher(), 5000);
            }
        });
    },

    computeSectionTops() {
        const query = wx.createSelectorQuery();
        query.selectAll('.section').boundingClientRect();
        query.select('.dishes-panel').boundingClientRect();
        query.exec(res => {
            const sectionRects = res[0] || [];
            const panelRect = res[1];
            if (!panelRect) return;
            this.sectionTops = sectionRects.map(r => r.top - panelRect.top);
        });
    },

    onTapCategory(e) {
        const index = e.currentTarget.dataset.index;
        const id = `cat-${index}`;
        this.setData({ activeCategoryIndex: index, scrollIntoView: id });
    },

    onDishesScroll(e) {
        if (!this.sectionTops || this.sectionTops.length === 0) return;
        const scrollTop = e.detail.scrollTop;
        let currentIndex = 0;
        for (let i = 0; i < this.sectionTops.length; i += 1) {
            if (scrollTop >= this.sectionTops[i]) {
                currentIndex = i;
            } else {
                break;
            }
        }
        if (currentIndex !== this.data.activeCategoryIndex) {
            this.setData({ activeCategoryIndex: currentIndex });
        }
    },

    onAddDish(e) {
        const name = e.currentTarget.dataset.name;
        const cartItems = { ...this.data.cartItems };
        cartItems[name] = (cartItems[name] || 0) + 1;
        const cartCount = Object.values(cartItems).reduce((sum, n) => sum + n, 0);
        const animating = { ...this.data.animating, [name]: true };
        const cartList = Object.keys(cartItems).map(n => {
            const found = this.findDishByName(n);
            return { name: n, count: cartItems[n], emoji: found?.emoji || '', desc: found?.desc || '' };
        });
        this.setData({ cartItems, cartCount, animating, cartList });
        setTimeout(() => {
            this.setData({ [`animating.${name}`]: false });
        }, 320);
    },

    onTapCart() {
        this.setData({ showCartDrawer: true });
    },

    onRemoveCartItem(e) {
        const name = e.currentTarget.dataset.name;
        const cartItems = { ...this.data.cartItems };
        if (!cartItems[name]) return;
        delete cartItems[name];
        const cartCount = Object.values(cartItems).reduce((sum, n) => sum + n, 0);
        const cartList = Object.keys(cartItems).map(n => {
            const found = this.findDishByName(n);
            return { name: n, count: cartItems[n], emoji: found?.emoji || '', desc: found?.desc || '' };
        });
        this.setData({ cartItems, cartCount, cartList });
    },

    onPlaceOrder() {
        if (this.data.cartCount === 0) {
            wx.showToast({ title: 'Ë¥≠Áâ©ËΩ¶‰∏∫Á©∫', icon: 'none' });
            return;
        }
        const app = getApp();
        if (!app.globalData.cloudReady) {
            wx.showToast({ title: '‰∫ëÊúçÂä°Êú™ÂáÜÂ§áÂ•Ω', icon: 'none' });
            return;
        }
        const db = wx.cloud.database();
        const promises = this.data.cartList.map(item => {
            console.log('Ê∑ªÂä†ËÆ¢ÂçïÈ°π', item);
            return db.collection('orderedDishes').add({
                data: {
                    id: Date.now() + Math.random().toString(36).substr(2, 9),
                    text: `${item.emoji} ${item.name} (${item.count}x)`,
                    done: false,
                    createdAt: new Date()
                }
            });
        });
        Promise.all(promises)
            .then(() => {
                console.log('ËÆ¢ÂçïÊèê‰∫§ÊàêÂäü');
                wx.showToast({ title: 'ËÆ¢ÂçïÂ∑≤Êèê‰∫§', icon: 'success' });
                this.setData({ cartItems: {}, cartCount: 0, cartList: [], showCartDrawer: false });
            })
            .catch(err => {
                console.error('Ê∑ªÂä†ËÆ¢ÂçïÂ§±Ë¥•', err);
                wx.showToast({ title: `Êèê‰∫§Â§±Ë¥•: ${err.errMsg || 'Êú™Áü•ÈîôËØØ'}`, icon: 'none' });
            });
    },

    findDishByName(name) {
        for (const section of this.data.sections) {
            for (const d of section.items) {
                if (d.name === name) return d;
            }
        }
        return null;
    },

    goIndex() { /* already on index */ },
    goWheel() { wx.redirectTo({ url: '/pages/wheel/index' }); },
    goTodo() { wx.redirectTo({ url: '/pages/todo/index' }); }
});